from functools import reduce
from itertools import count, cycle
from math import factorial


def run():
    print("Практическое задание 4 ----------")
    """1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. 
    Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных 
    значений необходимо запускать скрипт с параметрами. """

    print("1е задание - см. файл lesson4-1.py")

    """2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего 
    элемента.
    Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
    Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
    Результат: [12, 44, 4, 10, 78, 123]."""

    numbers = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
    print(f"Исходные данные = {numbers}")
    numbers_filtered = [numbers[i]
                        for i in range(1, len(numbers))
                        if numbers[i] > numbers[i - 1]]
    print(f"Результат = {numbers_filtered}")

    """3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
    Подсказка: используйте функцию range() и генератор."""

    list_result = [el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]
    print(f"Результат = {list_result}")

    """4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив 
    чисел, соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения 
    задания обязательно используйте генератор. 
    Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
    Результат: [23, 1, 3, 10, 4, 11]"""

    numbers2 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
    print(f"Исходные данные = {numbers2}")
    numbers2_filtered = [el for el in numbers2 if numbers2.count(el) == 1]
    print(f"Результат = {numbers2_filtered}")

    """5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти 
    чётные числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов 
    списка. Подсказка: использовать функцию reduce(). """

    numbers3 = [el for el in range(100, 1001, 2)]
    print(f"Исходные данные = {numbers3}")
    numbers3_multi_pulti = reduce(lambda x, y: x*y, numbers3)
    print(f"Результат = {numbers3_multi_pulti}")

    """6. Реализовать два небольших скрипта: 
    - итератор, генерирующий целые числа, начиная с указанного; 
    - итератор, повторяющий элементы некоторого списка, определённого заранее. 
    Подсказка: используйте функцию count() и cycle() модуля itertools. 
    Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
    Предусмотрите условие его завершения. 
    #### 
    Например, в первом задании выводим целые числа, начиная с 3. 
    При достижении числа 10 — завершаем  цикл. 
    Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится. """

    begin_number = 10  # начальное значение
    delta = 20  # всего, генерируемых элементов
    for el in intGen(begin_number, delta):
        print(el)

    it = "1234567890"
    it_count = 0
    r_count = 3  # кол-во повторений
    for el in cycle(it):
        if el == it[0]:
            it_count += 1
        if it_count < r_count:
            print(el)
        else:
            break

    """7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове 
    функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она 
    отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!. 
    Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24. 
    """

    for el in fact(4):
        print(el)


def intGen(begin_number, delta):  # begin + delta = максимальное число
    for el in count(begin_number):
        if el > begin_number + delta - 1:
            yield None
            break
        yield el


def fact(n):
    for i in count(1):
        if i <= n:
            result = factorial(i)
            yield result
        else:
            break
